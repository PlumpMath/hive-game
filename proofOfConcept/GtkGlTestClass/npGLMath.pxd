cimport numpy as np

__version__ = '2015.01.29'
__docformat__ = 'restructuredtext en'
__all__ = ()
cpdef np.ndarray identity_matrix()
cpdef np.ndarray translation_matrix(np.ndarray direction)
cpdef np.ndarray translation_from_matrix(np.ndarray matrix)
cpdef np.ndarray reflection_matrix(np.ndarray point, np.ndarray normal)
cpdef reflection_from_matrix(np.ndarray matrix)
cpdef np.ndarray rotation_matrix(angle, np.ndarray direction, np.ndarray point=*)
cpdef rotation_from_matrix(np.ndarray matrix)
cpdef np.ndarray scale_matrix(factor, np.ndarray origin=*, np.ndarray direction=*)
cpdef scale_from_matrix(np.ndarray matrix)
cpdef projection_matrix(np.ndarray point, np.ndarray normal, np.ndarray direction=*,
                      np.ndarray perspective=*, pseudo=*)
cpdef projection_from_matrix(np.ndarray matrix, pseudo=*)
cpdef np.ndarray clip_matrix(left, right, bottom, top, near, far, perspective=*)
cpdef np.ndarray shear_matrix(angle, np.ndarray direction, np.ndarray point, np.ndarray normal)
cpdef shear_from_matrix(np.ndarray matrix)
cpdef decompose_matrix(np.ndarray matrix)
cpdef np.ndarray compose_matrix(np.ndarray scale=*, np.ndarray shear=*, np.ndarray angles=*, np.ndarray translate=*,
                   np.ndarray perspective=*)
cpdef np.ndarray orthogonalization_matrix(np.ndarray lengths, np.ndarray angles)
cpdef affine_matrix_from_points(v0, v1, shear=*, scale=*, usesvd=*)
cpdef superimposition_matrix(v0, v1, scale=*, usesvd=*)
cpdef euler_matrix(ai, aj, ak, axes=*)
cpdef euler_from_matrix(matrix, axes=*)
cpdef euler_from_quaternion(quaternion, axes=*)
cpdef quaternion_from_euler(ai, aj, ak, axes=*)
cpdef quaternion_about_axis(angle, axis)
cpdef np.ndarray quaternion_matrix(np.ndarray quaternion)
cpdef np.ndarray quaternion_from_matrix(np.ndarray matrix, isprecise=*)
cpdef np.ndarray quaternion_multiply(np.ndarray quaternion1, np.ndarray quaternion0)
cpdef np.ndarray quaternion_conjugate(np.ndarray quaternion)
cpdef np.ndarray quaternion_inverse(np.ndarray quaternion)
cpdef quaternion_real(np.ndarray quaternion)
cpdef np.ndarray quaternion_imag(np.ndarray quaternion)
cpdef np.ndarray quaternion_slerp(np.ndarray quat0, np.ndarray quat1, fraction, spin=*, shortestpath=*)
cpdef np.ndarray random_quaternion(rand=*)
cpdef np.ndarray random_rotation_matrix(rand=*)
cpdef np.ndarray arcball_map_to_sphere(point, center, radius)
cpdef np.ndarray arcball_constrain_to_axis(point, axis)
cpdef np.ndarray arcball_nearest_axis(point, axes)
cpdef np.ndarray vector_norm(data, axis=*, out=*)
cpdef np.ndarray unit_vector(data, axis=*, out=*)
cpdef np.ndarray random_vector(size)
cpdef np.ndarray vector_product(v0, v1, axis=*)
cpdef angle_between_vectors(np.ndarray v0, np.ndarray v1, directed=*, axis=*)
cpdef np.ndarray inverse_matrix(matrix)
cpdef is_same_transform(np.ndarray matrix0, np.ndarray matrix1)
